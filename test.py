#find all "projectEuler*.py" file and make sure all is runable
#for python2.7 and python3.4+ compatible, also `pip install sixer` which can modify the code into 
#backup before try, also *.py.bak file are generated by 2to3

from glob import glob
import subprocess
import os.path

flist = glob('projecteuler/projectEuler*.py')
flist = [f for f in flist if str(f[19]).isdigit()]
print(flist)

#first 10 liner need appending
#projectEuler54_TexasPoker.py 

#flist = ['source/projectEuler56.py']
prefix = ["# -*- coding: utf-8 -*-\n", 
"from __future__ import print_function, unicode_literals, absolute_import, division\n"
]

def to_six(flist):
    for f in flist:
        process = subprocess.Popen('2to3 -f print -w {}'.format(f), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        out, err = process.communicate()
        if(process.returncode != 0):
            print('Error in 2to3 in file:'+f)
            print(out)
            print(err)
        else:
            ff = open(f, 'r')
            lines = ff.readlines()
            ff.close()

            fff = open(f, 'w')
            fff.writelines(prefix)
            fff.writelines(lines)
    
#run each file
def test(flist):
    for f in flist:
        process = subprocess.Popen('python '.format(f), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        out, err = process.communicate()
        if(process.returncode != 0):
            print('Error run this file:'+f)
            print(out)
            print(err)
        else:
            print('Successfully run file:'+f) # it does not mean the solution is correct, please check on projecteuler.net
            
#to_six(flist) #all done
#test(flist)

#############################
"""
link to other authors's website
more than 200 problems solved by Java 	Python 	Mathematica 	Haskell: <https://github.com/nayuki/Project-Euler-solutions>
60 problems: <http://www.s-anand.net/euler.html>

- most of solutions are runnable up to problem 50
-----------------------------------------
- 33, 55,85, 58, 67 no  solution implemented
- 31, 44, 50, 59cbruteforce failed

---------------------------------------------
- >60 only a few problems are tried
- 71 not correct
- 60, 70, 81, 100 failed to find a solution by bruteforce
- >100 not checked yet,

---------------------------------------------
need further optimization, e.g.  cython
- 51 takes 25 second to finish by bruteforce
- 40 takes 171 seconds to finish by bruteforce
- 43 takes 30 seconds
"""

