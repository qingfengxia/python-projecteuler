# -*- coding: utf-8 -*-
from __future__ import print_function, unicode_literals, absolute_import, division
"""
problem description:

Pentagonal numbers are generated by the formula, Pn=n(3n-1)he first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70-8, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk -inimised; what is the value of D?


weblink:

"""

from projecteulerhelper import *
#timeit is import from helper, instead of timeit module
#

# test the correction by a small dimension first. 
# test  brute force first, method1
#then, try some smart method! 

def P(n):
    return n*(3*n-1)/2

def isP(x):
    pass
    
from itertools import combinations
    
def test():
    #
    print([P(i) for i in range(1,5)])
    for t in combinations(range(4),2) :
        print(t)
    print('end of test()')
    
def bruteforce():
    #
    N=5000
    l=[P(i) for i in range(1,2*N)]
    s=set(l) # list has in op
    
    #tl=[t for t in combinations(l,2) if ( abs(t[1]-t[0]) in s) and (t[1]+t[0] in s) ]
    tl=[]
    for x in range(N-1):
        for y in range(x,2*N-1):
            if ( l[y]-l[x] in l[:x]) and (l[y]+l[x] in l[y:]):
                print(l[x],l[y]) 
                tl.append([( l[x],l[y] )])
    if len(tl)>1:
        print(tl)
        sl=sorted(tl, key=lambda t:t[1]-t[0])
        print(sl[0] [1]- sl[0] [0])  #5482660
    else:
        print('the tested N is not big enough')
        
def smarter():
    pass
    
def problem():
    test()
    bruteforce() #
    #smarter()
    
if __name__ == "__main__":
    timeit(problem)
    #timeit(func, param)
